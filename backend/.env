# ============================================================================
# VARIÁVEIS DE AMBIENTE - EPS CAMPANHAS (Backend) - EXEMPLO
# ============================================================================
# Descrição: Define todas as variáveis de ambiente necessárias para o backend
# NestJS e para a configuração do banco de dados PostgreSQL via Prisma.
#
# INSTRUÇÕES:
# 1. Copie este arquivo e renomeie para ".env"
# 2. Preencha os valores das variáveis (NÃO use os valores de exemplo em produção)
# 3. NUNCA commite o arquivo .env no Git (já está no .gitignore)
#
# REFATORAÇÃO (Sprint 18.2 - Segurança Avançada):
# - JWT_SECRET agora é OBRIGATÓRIO (sistema aborta se ausente)
# - Adicionadas instruções para geração de chave segura
# - Adicionadas variáveis para Rate Limiting (Throttler)
# ============================================================================

# ----------------------------------------------------------------------------
# CONFIGURAÇÃO DO BANCO DE DADOS POSTGRESQL
# ----------------------------------------------------------------------------

## Usuário do banco de dados PostgreSQL
POSTGRES_USER=eps_admin

## Senha do banco de dados PostgreSQL
## PRODUÇÃO: Use uma senha forte e complexa (mínimo 16 caracteres)
## DESENVOLVIMENTO: Use uma senha simples (não commitada no Git)
POSTGRES_PASSWORD=eps_senha_segura_2025

## Nome do banco de dados PostgreSQL
POSTGRES_DB=eps_campanhas_db

## Host do banco de dados PostgreSQL
## DESENVOLVIMENTO: localhost ou 127.0.0.1
## PRODUÇÃO: IP ou hostname do servidor de banco de dados
POSTGRES_HOST=localhost

## Porta do banco de dados PostgreSQL (padrão: 5432)
POSTGRES_PORT=5432

## URL de conexão completa para o Prisma ORM
## Formato: postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=public
## Esta variável é construída automaticamente a partir das variáveis acima
## NÃO modifique manualmente, exceto em casos especiais (ex: SSL, pooling)
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?schema=public

# ----------------------------------------------------------------------------
# CONFIGURAÇÃO DE JWT (JSON WEB TOKEN) - CRÍTICO
# ----------------------------------------------------------------------------

## Chave secreta para assinar tokens JWT
## OBRIGATÓRIO: Sistema ABORTA se não configurado (Vulnerabilidade #1 corrigida)
##
## INSTRUÇÕES PARA GERAR CHAVE SEGURA:
## Execute no terminal (Node.js):
##   node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
##
## Ou execute no terminal (OpenSSL):
##   openssl rand -hex 64
##
## IMPORTANTE:
## - Use chave DIFERENTE em cada ambiente (dev, staging, prod)
## - Mínimo 32 caracteres (recomendado: 64 caracteres)
## - NUNCA use valores como "default-secret", "123456" ou "secret"
## - NUNCA commite esta chave no Git
## - Se chave for comprometida, TODOS os tokens ficam inválidos
##
## EXEMPLO (NÃO USE EM PRODUÇÃO):
JWT_SECRET=a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3

## Tempo de expiração dos tokens JWT
## Formatos aceitos:
## - "1h" (1 hora)
## - "7d" (7 dias)
## - "30d" (30 dias)
## - "60" (60 segundos)
##
## RECOMENDAÇÕES:
## - Desenvolvimento: 7d (facilita desenvolvimento)
## - Produção: 7d a 30d (balanço entre segurança e UX)
## - Tokens de curta duração: 1h (operações sensíveis)
##
## PADRÃO (se não configurado): 7d
JWT_EXPIRES_IN=7d

# ----------------------------------------------------------------------------
# CONFIGURAÇÃO DO SERVIDOR
# ----------------------------------------------------------------------------

## Porta onde o backend NestJS será executado
## PADRÃO: 3000
## PRODUÇÃO: Geralmente 3000 ou 8080
PORT=3000

## Ambiente de execução
## Valores aceitos: "development", "production", "test"
## DESENVOLVIMENTO: "development" (logs detalhados, validações extras)
## PRODUÇÃO: "production" (logs mínimos, otimizações)
NODE_ENV=development

# ----------------------------------------------------------------------------
# CONFIGURAÇÃO DE RATE LIMITING (THROTTLER) - NOVO
# ----------------------------------------------------------------------------

## Limite global de requisições por minuto
## Previne ataques de brute force, DoS e spam
## PADRÃO: 10 requisições por minuto por IP
## PRODUÇÃO: Ajuste conforme tráfego esperado (10-100)
THROTTLE_LIMIT=10

## Janela de tempo para contagem de requisições (milissegundos)
## PADRÃO: 60000ms (1 minuto)
## Não recomendado alterar
THROTTLE_TTL=60000

# ----------------------------------------------------------------------------
# CONFIGURAÇÃO DE UPLOAD DE ARQUIVOS (OPCIONAL)
# ----------------------------------------------------------------------------

## Diretório para armazenar uploads de arquivos
## DESENVOLVIMENTO: ./uploads (diretório local)
## PRODUÇÃO: Usar serviço de armazenamento em nuvem (AWS S3, Azure Blob, etc.)
UPLOAD_DIR=./uploads

## Tamanho máximo de arquivo (bytes)
## PADRÃO: 5242880 (5MB)
## PRODUÇÃO: Ajuste conforme necessidade
MAX_FILE_SIZE=5242880

# ----------------------------------------------------------------------------
# CONFIGURAÇÃO DE EMAIL (OPCIONAL - FUTURO)
# ----------------------------------------------------------------------------

## Servidor SMTP para envio de emails
## Usado para: Reset de senha, notificações, etc.
## DESENVOLVIMENTO: Usar serviço de teste (Mailtrap, Ethereal)
## PRODUÇÃO: Usar serviço confiável (SendGrid, AWS SES, etc.)
# SMTP_HOST=smtp.example.com
# SMTP_PORT=587
# SMTP_USER=seu_usuario
# SMTP_PASSWORD=sua_senha
# SMTP_FROM=noreply@epscampanhas.com

# ----------------------------------------------------------------------------
# CONFIGURAÇÃO DE CORS (CROSS-ORIGIN RESOURCE SHARING)
# ----------------------------------------------------------------------------

## URL do frontend (para permitir requisições)
## DESENVOLVIMENTO: http://localhost:3001
## PRODUÇÃO: https://epscampanhas.com
FRONTEND_URL=http://localhost:3001

# ----------------------------------------------------------------------------
# CONFIGURAÇÃO DE LOGGING (OPCIONAL)
# ----------------------------------------------------------------------------

## Nível de log
## Valores: "error", "warn", "info", "debug", "verbose"
## DESENVOLVIMENTO: "debug" ou "verbose"
## PRODUÇÃO: "warn" ou "error"
LOG_LEVEL=debug

# ============================================================================
# FIM DO ARQUIVO .env.example
# ============================================================================
#
# PRÓXIMOS PASSOS:
# 1. Copie este arquivo: cp .env.example .env
# 2. Gere JWT_SECRET seguro: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
# 3. Configure DATABASE_URL com suas credenciais PostgreSQL
# 4. Execute migrations: npm run prisma:migrate
# 5. Inicie o servidor: npm run start:dev
#
# SEGURANÇA:
# - NUNCA commite o arquivo .env no Git
# - Use senhas fortes e únicas em produção
# - Rotacione JWT_SECRET periodicamente
# - Mantenha backups das variáveis de ambiente de produção
# ============================================================================
